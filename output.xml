<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0 (Python 3.10.4 on win32)" generated="20220413 16:43:36.141" rpa="false" schemaversion="3">
<suite id="s1" name="DataBaseTesting" source="C:\Users\EGNUASN\PycharmProjects\RobotFramework\TestCases\DataBaseTesting.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20220413 16:43:36.219" level="INFO">Connecting using : pymysql.connect(db=mydb, user=root, passwd=root, host=127.0.0.1, port=3306, charset=None) </msg>
<status status="PASS" starttime="20220413 16:43:36.172" endtime="20220413 16:43:36.235"/>
</kw>
<test id="s1-t1" name="Check David record present in person Table" line="31">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name="David";</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20220413 16:43:36.235" level="INFO">Executing : Check If Exists In Database  |  select id from mydb.person where first_name="David"; </msg>
<msg timestamp="20220413 16:43:36.235" level="INFO">Executing : Query  |  select id from mydb.person where first_name="David"; </msg>
<status status="PASS" starttime="20220413 16:43:36.235" endtime="20220413 16:43:36.241"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.235" endtime="20220413 16:43:36.241"/>
</test>
<test id="s1-t2" name="Check jio record present in person Table" line="35">
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name="jio";</arg>
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Check If Not Exists In Database  |  select id from mydb.person where first_name="jio"; </msg>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Query  |  select id from mydb.person where first_name="jio"; </msg>
<msg timestamp="20220413 16:43:36.241" level="FAIL">Expected to have have no rows from 'select id from mydb.person where first_name="jio";' but got some rows : ((102,),).</msg>
<status status="FAIL" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241"/>
</kw>
<status status="FAIL" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241">Expected to have have no rows from 'select id from mydb.person where first_name="jio";' but got some rows : ((102,),).</status>
</test>
<test id="s1-t3" name="Check person table exist in mydb database" line="38">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>person</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Table Must Exist  |  person </msg>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='person' </msg>
<status status="PASS" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241"/>
</test>
<test id="s1-t4" name="Verify Row Count is Zero" line="41">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name="xyz";</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Row Count Is 0  |  select id from mydb.person where first_name="xyz"; </msg>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Row Count  |  select id from mydb.person where first_name="xyz"; </msg>
<status status="PASS" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241"/>
</test>
<test id="s1-t5" name="Verify Row Count is Equal to some value" line="44">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name="David";</arg>
<arg>1</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Row Count Is Equal To X  |  select id from mydb.person where first_name="David";  |  1 </msg>
<msg timestamp="20220413 16:43:36.241" level="INFO">Executing : Row Count  |  select id from mydb.person where first_name="David"; </msg>
<status status="PASS" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.241"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.241" endtime="20220413 16:43:36.257"/>
</test>
<test id="s1-t6" name="Verify Row Count is Greater than some value" line="47">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name="David";</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220413 16:43:36.257" level="INFO">Executing : Row Count Is Greater Than X  |  select id from mydb.person where first_name="David";  |  0 </msg>
<msg timestamp="20220413 16:43:36.257" level="INFO">Executing : Row Count  |  select id from mydb.person where first_name="David"; </msg>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</test>
<test id="s1-t7" name="Verify Row Count is less than some value" line="50">
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name="David";</arg>
<arg>5</arg>
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220413 16:43:36.257" level="INFO">Executing : Row Count Is Less Than X  |  select id from mydb.person where first_name="David";  |  5 </msg>
<msg timestamp="20220413 16:43:36.257" level="INFO">Executing : Row Count  |  select id from mydb.person where first_name="David"; </msg>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</test>
<test id="s1-t8" name="Update a record in person table" line="53">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Update mydb.person set first_name="jio" where id=102;</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220413 16:43:36.257" level="INFO">Executing : Execute SQL String  |  Update mydb.person set first_name="jio" where id=102; </msg>
<msg timestamp="20220413 16:43:36.257" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220413 16:43:36.257" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</test>
<test id="s1-t9" name="Retrive Records from Person Table" line="58">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>Select * from mydb.person;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220413 16:43:36.257" level="INFO">Executing : Query  |  Select * from mydb.person; </msg>
<msg timestamp="20220413 16:43:36.257" level="INFO">@{queryResults} = [ (101, 'David', 'canady') | (102, 'jio', 'cady') ]</msg>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>many @{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</kw>
<status status="PASS" starttime="20220413 16:43:36.257" endtime="20220413 16:43:36.257"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220413 16:43:36.272" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220413 16:43:36.272" endtime="20220413 16:43:36.272"/>
</kw>
<status status="FAIL" starttime="20220413 16:43:36.141" endtime="20220413 16:43:36.272"/>
</suite>
<statistics>
<total>
<stat pass="8" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="8" fail="1" skip="0" id="s1" name="DataBaseTesting">DataBaseTesting</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
